//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomCharacterShadows()
{
	u8 howManyPlayers
	if (hideSecondPlayer() && getNumPlayers() == 0x02)
		howManyPlayers = 0x01
	else
		howManyPlayers = getNumPlayers()
	
	if (Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02)
		Renderer.drawCustomSprite(howManyPlayers < 0x02 ? "bluespheres_shadow_1P_smooth" : "bluespheres_shadow_2P_smooth", 0x8f + getScreenExtend(), 0x94, 0x00, 0x00, 0x3100)
	else
		Renderer.drawCustomSprite(howManyPlayers < 0x02 ? "Shadow_1P" : "Shadow_2P", getScreenWidth() / 0x02, 0x94, 0x00, 0x00, 0x3100, 0x00, 0x90)
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomGround()
{
	// Disable rendering of plane B prio
	Renderer.enableDefaultPlane(0x03, false)
	
	// Render glow effect for background
	ManiaSpheres.renderBlueSphereGlow("GlowBackground", getScreenWidth() / 0x02, -0x08, 0x2000, 0x80)  
	
	// Render our own version of the ground
	u32 fieldColorBaseAddress = u32[0xffffe446]
	Game.renderBlueSpheresGround(bluespheres.position.x, bluespheres.position.y, bluespheres.direction, u16[fieldColorBaseAddress], u16[fieldColorBaseAddress+0x08])
	ManiaSpheres.renderBlueSpheresGround()
	
	// Render glow effect on top
	ManiaSpheres.renderBlueSphereGlow("GlowForeground", getScreenWidth() / 0x02, 0x1e, 0x3100, 0x94)
}

//@ Function taken from sonic3air_dev/scripts/level/special/bluespheres.lemon
function void BlueSpheres.renderCustomSpheres()
{
	u32 ptr = 0x800000
	Game.writeBlueSpheresData(ptr, 0xfffff100, bluespheres.position.x, bluespheres.position.y, bluespheres.direction)
	
	u16 count = u16[ptr]
	ptr += 0x02
	for (u16 i = 0x00; i < count; ++i)
	{
		// Read sphere properties
		u16 px = u16[ptr] + getScreenExtend() - 0x28
		u16 py = u16[ptr+0x02]
		u16 size = u16[ptr+0x04]
		u8 sphereType = u8[ptr+0x06]
		ptr += 0x07
		
		// Spheres size
		u8 form = ManiaSpheres.getSphereSize32(size)
		u8 form16 = ManiaSpheres.getSphereSize16(size)
		
		py -= (0x10 - form / 0x02) * 0x02 / 0x03 + 0x01
		py -= bluespheres.lifted_height
		
		bool behindHorizon = (size < 0x1b90)
		u16 renderQueue = (behindHorizon ? 0x2000 : 0x9000) + size / 0x200 
		u8 alpha = (sphereType == 0x0a || sphereType == 0x0c) ? 0xa0 : 0xff // || adds a check for D.A. Garden green spheres
		
		D0.u16 = u8(sphereType) * 0x08
		A3 = u32[0xffffe480 + D0.s16]
		D6.u16 = u16[0xffffe480 + D0.s16 + 0x04]

		D0.u16 = u16[0xffffe480 + D0.s16 + 0x06]
		D1 = (D0.u16 & 0x8000) ? 0x00 : (form16 * 0x02)
		D1.u16 += D0.u16 * 0x02
		A3 += u16[A3 + D1.s16]

		D1.u16 = u16[A3] - 0x01 // This is always 0, except for Super Emeralds
		A3 += 0x02
		while (D1.s16 >= 0x00)
		{
			// Sonic 3D in 2D Ring Glow Effect by GFX32, https://gamebanana.com/mods/360033
			if (Mods.isModActive("Sonic 3D in 2D Ring Glow Effect") && (sphereType >= 0x06 && sphereType <= 0x09)) // Glow effect for rings sparkles
			{
				Renderer.drawCustomSprite("3d2dring_glow", px, py, 0x00, 0x00, renderQueue - 0x01, 0x00, 0x8f - (((u8[0xfffffeb2] >> 0x01) - 0x04) * 0x1f)) 
			}
			
			u64 key = ManiaSpheres.getSphereSprite(sphereType, form, form16)
			if (sphereType == 0x04) // Ring with 2D Transform
			{
				Renderer.drawCustomSpriteWithTransform(key, px, py + 0x02, 0x00, 0x00, renderQueue, 0xffffffff, ((ManiaSpheres.get2DTransformSize32(form) * 0x02) / 0x03 - 0x200) + ManiaSpheres.get2DTransformRingCamera(form16), 0x00, 0x00, (ManiaSpheres.get2DTransformSize32(form) * 0x02) / 0x03 - 0x200)
			}
			else // Other spheres types
			{
				Renderer.drawCustomSprite(key, px, py, 0x00, 0x00, renderQueue, 0x00, alpha)
			}
			
			A3 += 0x06
			--D1.s16
		}
	}
}

function void ManiaSpheres.renderBlueSphereGlow(u64 key, u16 px, u16 py, u16 renderQueue, u8 alpha)
{
	Renderer.drawCustomSprite(key, px, py, 0x00, 0, renderQueue, 0x00, alpha)
	Renderer.drawCustomSprite(key, px, py, 0x00, SPRITE_FLAG_FLIP_X, renderQueue, 0x00, alpha)
}

function void ManiaSpheres.renderBlueSpheresGround()
{
	if (SETTING_BS_SHARPGROUND == 0x01 && !(Game.getSetting(SETTING_BS_VISUAL_STYLE) & 0x02))
	{
		for (s16 w = 0x00; w < 0x40; w++)
			Renderer.drawCustomSprite(Game.getBlueSpheresGroundSprite(0x01), 0x00, 0x00, 0x00, 0x00, 0x3000)
	} 
	else
	{
		Renderer.drawCustomSprite(Game.getBlueSpheresGroundSprite(0x01), 0x00, 0x00, 0x00, 0x00, 0x3000)
	}
	Renderer.drawCustomSprite(Game.getBlueSpheresGroundSprite(0x00), 0x00, 0x00, 0x00, 0x10, 0x3000)
}

// For correct work with the Blue Sphere Time Attack mod
function void BlueSpheresTimer.renderTimer(s16 px, s16 py, u16 renderQueue)
{
	base.BlueSpheresTimer.renderTimer(px, py, renderQueue)
} 

function void ManiaSpheres.renderSwitchLabel(u16 px, u16 py, u16 renderQueue)
{
	u8 alpha
	u8 timer = global.framecounter % 0x1f
	
	if (bluespheres.character.switch == 0x01)
		alpha = (0x10 * timer) 
	
	Renderer.drawCustomSprite("SwitchBadge", px, py, 0x00, 0x00, renderQueue, 0x00, alpha)
	Renderer.drawCustomSprite("SwitchButton", px - 0x16, py, 0x00, 0x00, renderQueue, 0x00, alpha)
}

function void ManiaSpheres.renderHUDPlate(u64 key, s32 number, u16 px, u16 py, u16 renderQueue)
{
	ManiaSpheres.renderNumber("Number_%d", number / 0x64, px - 0x10, py, renderQueue) // For example: Get 2 from 256
	ManiaSpheres.renderNumber("Number_%d", number / 0x0a, px, py, renderQueue) // For example: Get 5 from 256
	ManiaSpheres.renderNumber("Number_%d", number, px + 0x10, py, renderQueue) // For example: Get 6 from 256
	Renderer.drawCustomSprite(key, px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
}

function void ManiaSpheres.renderNumber(u64 stringMask, u16 number, u16 px, u16 py, u16 renderQueue)
{
	u8 digit = number % 0x0A
	Renderer.drawCustomSprite(stringformat(stringMask, digit), px, py, 0x00, SPRITE_FLAG_PRIO, renderQueue)
	number /= 0x0A
}